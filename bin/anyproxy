#!/usr/bin/env node

'use strict';

const { program } = require('commander');
const chalk = require('chalk');
const { clearCerts, generateRootCA } = require('../src/certMgr');
const util = require('../src/util');
const rootCACheck = require('./rootCACheck');
const startServer = require('./startServer');
const logUtil = require('../src/log');
const packageInfo = require('../package.json');

async function main() {

    program
        .version(packageInfo.version)
        .option('-p, --port [value]', '代理端口，默认为8001')
        .option('-r, --rule [value]', '规则文件路径')
        .option('-l, --throttle [value]', '限制速度，单位为kb/s（千字节/秒）')
        .option('-s, --silent', '不在终端打印任何内容')
        .option('-c, --clear', '清除所有证书和临时文件')
        .option('-ca, --root', '生成证书')
        .option('--ignore-unauthorized-ssl', '忽略所有SSL错误')
        .parse(process.argv);

    const options = program.opts();

    if (options.clear) {
        await clearCerts();
        await util.deleteFolderContentsRecursive(util.getAnyProxyTmpPath());
        console.log(chalk.green('证书清空完成！'));
        process.exit(0);
    } else if (options.root) {
        await generateRootCA();
        process.exit(0);
    } else {
        if (options.silent) {
            logUtil.setPrintStatus(false);
        }
        try {
            await rootCACheck();
        } catch (e) {
            console.error(e);
        }
        startServer(options);
    }
}

try {
    main();
} catch (e) {
    console.error(e);
}
